  METHOD add_attachment_to_object.

    TYPES: BEGIN OF lty_sofm,
             foltp TYPE sofm-foltp,
             folyr TYPE sofm-folyr,
             folno TYPE sofm-folno,
             doctp TYPE sofm-doctp,
             docyr TYPE sofm-docyr,
             docno TYPE sofm-docno,
           END OF lty_sofm.

    DATA: lv_path        TYPE string,
          lv_rootpath    TYPE string,
          lv_filename    TYPE string,
          lv_fname       TYPE string,
          lv_ext         TYPE string,
          lv_len         TYPE so_doc_len,
          lv_filetype    TYPE rlgrap-filetype,
          lv_object_type TYPE soodk-objtp,
          lv_put_to_kpro TYPE sonv-flag,
          ls_fol_id      TYPE soodk,
          ls_obj_id      TYPE soodk,
          ls_obj_data    TYPE sood1,
          ls_object      TYPE borident,
          ls_note        TYPE borident,
          ls_content     TYPE soli,
          lt_content     TYPE soli_tab,
          lt_objhead     TYPE STANDARD TABLE OF soli,
          lo_objhead     TYPE REF TO cl_bcs_objhead,
          lv_filedata    TYPE xstring,
          lv_filesize    TYPE i,

          lo_del_gos     TYPE REF TO cl_gos_document_service,
          lv_del_object  TYPE borident,
          lv_del_lporb   TYPE sibflporb,
          lt_del_object  TYPE sibflporbt,
          lt_del_sofm    TYPE TABLE OF lty_sofm.
    TRY .
        lv_path = iv_filepath.

        DATA(lv_plitter) = '/'. "Server
        FIND FIRST OCCURRENCE OF ':' IN lv_path.
        IF sy-subrc = 0.
          lv_plitter = '\'.     "Local
        ENDIF.
        REPLACE ALL OCCURRENCES OF '/' IN lv_path WITH '\'.

        cl_bcs_utilities=>split_path( EXPORTING iv_path = lv_path IMPORTING ev_path = lv_rootpath ev_name = lv_filename ).
        cl_bcs_utilities=>split_name( EXPORTING iv_name = lv_filename IMPORTING ev_name = lv_fname ev_extension = lv_ext ).

        REPLACE ALL OCCURRENCES OF '\' IN lv_path WITH lv_plitter.
        REPLACE ALL OCCURRENCES OF '\' IN lv_rootpath WITH lv_plitter.
      CATCH cx_bcs.
    ENDTRY.

    IF lv_path IS INITIAL AND iv_base64 IS INITIAL.
      RAISE file_not_found.
    ENDIF.

    IF iv_title IS NOT INITIAL.
      lv_fname = iv_title.
    ENDIF.

    "Currently issue: Cannot upload correct encode of text file
    IF iv_base64 IS NOT INITIAL.
      lv_filedata = cl_http_utility=>decode_x_base64( iv_base64 ).

      CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
        EXPORTING
          buffer        = lv_filedata
        IMPORTING
          output_length = lv_filesize
        TABLES
          binary_tab    = lt_content.

      CALL FUNCTION 'SO_CONVERT_CONTENTS_BIN'
        EXPORTING
          it_contents_bin = lt_content
        IMPORTING
          et_contents_bin = lt_content.

      ls_obj_data-objdes    = lv_fname.
      ls_obj_data-objsns    = 'O'.
      ls_obj_data-objla     = sy-langu.
      ls_obj_data-file_ext  = lv_ext.
      ls_obj_data-objlen    = lv_filesize.
    ELSE.
      IF lv_plitter = '/'. "Server
* Open the file in binary mode
        OPEN DATASET lv_path FOR INPUT IN BINARY MODE.
        IF sy-subrc = 0.
* Since the file is opened in Binary mode, the entire contents of the
* file is read in one go!
          READ DATASET lv_path INTO lv_filedata.
          IF sy-subrc = 0.
            CLOSE DATASET lv_path. "Close the file
          ELSE.
            "Error handling
          ENDIF.
        ELSE.
          "Error Handling
        ENDIF.

        CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
          EXPORTING
            buffer        = lv_filedata
          IMPORTING
            output_length = lv_filesize
          TABLES
            binary_tab    = lt_content.

        CALL FUNCTION 'SO_CONVERT_CONTENTS_BIN'
          EXPORTING
            it_contents_bin = lt_content
          IMPORTING
            et_contents_bin = lt_content.

        ls_obj_data-objdes    = lv_fname.
        ls_obj_data-objsns    = 'O'.
        ls_obj_data-objla     = sy-langu.
        ls_obj_data-file_ext  = lv_ext.
        ls_obj_data-objlen    = lv_filesize.

      ELSE.
        CALL FUNCTION 'SO_OBJECT_UPLOAD'
          EXPORTING
            filetype                = lv_filetype
            path_and_file           = lv_path
            no_dialog               = 'X'
          IMPORTING
            filelength              = lv_len
            act_filetype            = lv_filetype
            act_objtype             = lv_object_type
            file_put_to_kpro        = lv_put_to_kpro
          TABLES
            objcont                 = lt_content
          EXCEPTIONS
            file_read_error         = 1
            invalid_type            = 2
            x_error                 = 3
            object_type_not_allowed = 4
            kpro_insert_error       = 5
            file_to_large           = 6
            OTHERS                  = 7.

        lo_objhead = cl_bcs_objhead=>create( lt_objhead[] ).
        lo_objhead->set_filename( lv_filename ).
        lo_objhead->set_format( lv_filetype ).
        lo_objhead->set_vsi_profile( cl_bcs_vsi_profile=>get_profile( ) ).
        lt_objhead[] = lo_objhead->mt_objhead.

        ls_obj_data-objdes   = lv_fname.
        ls_obj_data-file_ext = lv_object_type.
        ls_obj_data-objlen   = lv_len.
        IF NOT lv_put_to_kpro IS INITIAL.
          ls_obj_data-extct  = 'K'.
        ENDIF.


      ENDIF.
    ENDIF.

    APPEND |&SO_FILENAME={ lv_fname }| TO lt_objhead.
    APPEND |&SO_FORMAT=BIN| TO lt_objhead.


    CALL FUNCTION 'SO_FOLDER_ROOT_ID_GET'
      EXPORTING
        region    = 'B'
      IMPORTING
        folder_id = ls_fol_id
      EXCEPTIONS
        OTHERS    = 1.


    IF iv_delete_att_same_title IS NOT INITIAL.

      " Reading all the linked attachments with the Document
      lt_del_object = VALUE #( (  instid = iv_object
                                  typeid = iv_type
                                  catid  = 'BO') ).

      TRY .
          cl_binary_relation=>read_links_of_objects(
            EXPORTING
              it_objects = lt_del_object
            IMPORTING
              et_links_a = DATA(lt_links_a)
          ).
        CATCH cx_obl_model_error.     " Error with Model Roles
        CATCH cx_obl_parameter_error. " Incorrect Calling of Interface
        CATCH cx_obl_internal_error.  " Internal Error of Relationship Service
      ENDTRY.

      LOOP AT lt_links_a INTO DATA(ls_links_a).
        APPEND INITIAL LINE TO lt_del_sofm ASSIGNING FIELD-SYMBOL(<ls_sofm>).
        <ls_sofm> = ls_links_a-instid_b.
      ENDLOOP.
      IF lt_del_sofm IS NOT INITIAL.
        SELECT
            objtp,
            objyr,
            objno,
            filename
          FROM soc3n
          INTO TABLE @DATA(lt_del_soc3n)
          FOR ALL ENTRIES IN @lt_del_sofm
          WHERE relid     = 'DT'
            AND objtp     = @lt_del_sofm-doctp
            AND objyr     = @lt_del_sofm-docyr
            AND objno     = @lt_del_sofm-docno
            AND filename  = @iv_title.
      ENDIF.
      IF lt_del_soc3n IS NOT INITIAL.
        CREATE OBJECT lo_del_gos.
      ENDIF.
      LOOP AT lt_del_sofm INTO DATA(ls_sofm).
        READ TABLE lt_del_soc3n INTO DATA(ls_soc3n) WITH KEY
         objtp = ls_sofm-doctp
         objyr = ls_sofm-docyr
         objno = ls_sofm-docno.
        IF sy-subrc = 0.
          lv_del_object-objkey  = iv_object.
          lv_del_object-objtype = iv_type.
          lv_del_lporb-instid   = iv_object.
          lv_del_lporb-typeid   = iv_type.
          lv_del_lporb-catid    = 'BO'.
          lo_del_gos->delete_attachment(
            is_object     = lv_del_object
            is_lporb      = lv_del_lporb
            ip_attachment = CONV borident-objkey( |{  ls_sofm-foltp }{
                                                      ls_sofm-folyr }{
                                                      ls_sofm-folno }{
                                                      ls_sofm-doctp }{
                                                      ls_sofm-docyr }{
                                                      ls_sofm-docno }| )
          ).
        ENDIF.
      ENDLOOP.
    ENDIF.


    CALL FUNCTION 'SO_OBJECT_INSERT'
      EXPORTING
        folder_id             = ls_fol_id
        object_type           = 'EXT'
        object_hd_change      = ls_obj_data
      IMPORTING
        object_id             = ls_obj_id
      TABLES
        objhead               = lt_objhead
        objcont               = lt_content
      EXCEPTIONS
        active_user_not_exist = 35
        folder_not_exist      = 6
        object_type_not_exist = 17
        owner_not_exist       = 22
        parameter_error       = 23
        OTHERS                = 1000.

    ls_object-objkey  = iv_object.
    ls_object-objtype = iv_type.
    ls_note-objtype   = 'MESSAGE'.

    CONCATENATE
      ls_fol_id-objtp
      ls_fol_id-objyr
      ls_fol_id-objno
      ls_obj_id-objtp
      ls_obj_id-objyr
      ls_obj_id-objno
      INTO ls_note-objkey.

    CALL FUNCTION 'BINARY_RELATION_CREATE_COMMIT'
      EXPORTING
        obj_rolea    = ls_object
        obj_roleb    = ls_note
        relationtype = 'ATTA'
      EXCEPTIONS
        OTHERS       = 1.
    IF sy-subrc = 0.
      ev_objkey = ls_note-objkey.
    ENDIF.
*    ls_goslog-ddate     = sy-datum.
*    ls_goslog-dtime     = sy-uzeit.
*    ls_goslog-userid    = sy-uname.
*    ls_goslog-cat       = 'U'.
*    ls_goslog-filename  = lv_fname.
*    ls_goslog-busobj    = ls_object-objtype.
*    ls_goslog-filetype  = lv_object_type.
*    ls_goslog-objectid  = ls_object-objkey.
*    APPEND ls_goslog TO lt_goslog.
*    TRY.
*        MODIFY zgos_log FROM TABLE lt_goslog.
*      CATCH cx_sy_open_sql_db INTO DATA(cx_sy_ref_is_initial).
*    ENDTRY.
*    INSERT  zgos_log FROM TABLE lt_goslog.
*    COMMIT WORK.
  ENDMETHOD.