*&---------------------------------------------------------------------*
*& Include          ZPG_FI_INVFILEUPLOAD_F01
*&---------------------------------------------------------------------*
****************************************************************
* LOCAL CLASSES: Definition
****************************************************************
CLASS gcl_event_receiver DEFINITION.
  PUBLIC SECTION.
    METHODS:
      on_user_command FOR EVENT added_function OF cl_salv_events
        IMPORTING e_salv_function.
ENDCLASS.
****************************************************************
* LOCAL CLASSES: Implementation
****************************************************************
CLASS gcl_event_receiver IMPLEMENTATION.
  METHOD on_user_command.
    CASE e_salv_function.
      WHEN '&SAVE'.
        PERFORM save_data.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.
*&---------------------------------------------------------------------*
*& Form save_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM save_data .
*  DATA: lt_attachment TYPE TABLE OF ty_attachment.
  LOOP AT gt_data ASSIGNING FIELD-SYMBOL(<fs_data>) WHERE status <> gc_status_error.
    IF <fs_data>-url IS NOT INITIAL.
      APPEND INITIAL LINE TO gt_attachment ASSIGNING FIELD-SYMBOL(<fs_attachment>).
      <fs_attachment>-att_type = 'BKPF'.
      CONCATENATE <fs_data>-bukrs
                <fs_data>-invoice_no
                <fs_data>-gjahr INTO <fs_attachment>-att_object.
*      DATA(lv_invno_gjahr) = <fs_data>-invoice_no && <fs_data>-gjahr.
*      CONCATENATE <fs_data>-bukrs lv_invno_gjahr INTO <fs_attachment>-att_object SEPARATED BY space.
      <fs_attachment>-att_path   = <fs_data>-url.
    ENDIF.
  ENDLOOP.
  "  PERFORM add_attachment_to_object .
  PERFORM add_attachment_to_object2.
"  PERFORM add_attachment_to_object3.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form initialization
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM initialization .
  DATA: ls_functxt  TYPE smp_dyntxt.
  ls_functxt-icon_id = icon_xls.
  ls_functxt-quickinfo = 'Download Template'.
  ls_functxt-icon_text = 'Download Template'.
  sscrfields-functxt_01 = ls_functxt.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form selection_screen_set_funtion
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM selection_screen_set_funtion .

ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_path
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_path .
  DATA: Lv_desktop_path TYPE string,
        lv_rc           TYPE i,
        lt_filetable    TYPE filetable.
  CALL METHOD cl_gui_frontend_services=>get_desktop_directory
    CHANGING
      desktop_directory = lv_desktop_path
    EXCEPTIONS
      cntl_error        = 1
*     error_no_gui      = 2
*     not_supported_by_gui = 3
*     others            = 4
    .
  IF sy-subrc = 0.
    " this function helps view updates item when click new desktop dictionary
    CALL METHOD cl_gui_cfw=>update_view.
  ENDIF.
  "Open file
  CALL METHOD cl_gui_frontend_services=>file_open_dialog
    EXPORTING
      default_extension       = 'txt'
      initial_directory       = lv_desktop_path
    CHANGING
      file_table              = lt_filetable
      rc                      = lv_rc
    EXCEPTIONS
      file_open_dialog_failed = 1
      cntl_error              = 2
      error_no_gui            = 3
      not_supported_by_gui    = 4
      OTHERS                  = 5.
  "handle error      .
  IF sy-subrc <> 0.
*   Implement suitable error handling here\
    MESSAGE ID Sy-msgid
    TYPE 'S'
    NUMBER sy-msgno
    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
    DISPLAY LIKE sy-msgty.
    RETURN.
  ENDIF.
  "Handle Cancel logic
  IF lv_rc = 0.
    RETURN.
  ENDIF.
  "Assign p_path parameter
  p_path = lt_filetable[ 1 ]-filename.



ENDFORM.
*&---------------------------------------------------------------------*
*& Form download_temp
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GC_FILE_TEMP
*&---------------------------------------------------------------------*
FORM download_temp  USING    lv_temp_source TYPE tadir-obj_name .
  DATA: lv_stripped_name TYPE string,
        lv_path          TYPE string,
        lv_fullpath      TYPE string,
        lv_action        TYPE i,
        lv_temp_exited   TYPE btch0000-char1,
        lv_desktop_path  TYPE string.
  "Get desktop directory
  CALL METHOD cl_gui_frontend_services=>get_desktop_directory
    CHANGING
      desktop_directory = lv_desktop_path
    EXCEPTIONS
      cntl_error        = 1.
  IF sy-subrc = 0.
    " this function helps view updates item when click new desktop dictionary
    CALL METHOD cl_gui_cfw=>update_view.
  ENDIF.

  "Open Save Dialog
  CALL METHOD cl_gui_frontend_services=>file_save_dialog
    EXPORTING
      window_title              = 'Download Template'
      default_extension         = 'xlsx'
      file_filter               = 'xlsx'
      initial_directory         = lv_desktop_path
    CHANGING
      filename                  = lv_stripped_name
      path                      = lv_path
      fullpath                  = lv_fullpath
      user_action               = lv_action
    EXCEPTIONS
      cntl_error                = 1
      error_no_gui              = 2
      not_supported_by_gui      = 3
      invalid_default_file_name = 4
      OTHERS                    = 5.
  IF sy-subrc <> 0.
*   Implement suitable error handling here\
    MESSAGE ID Sy-msgid
    TYPE 'S'
    NUMBER sy-msgno
    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
    DISPLAY LIKE sy-msgty.
    LEAVE LIST-PROCESSING.
  ENDIF.
  "Cancel
  IF lv_action <> 0.
    RETURN.
  ENDIF.
  " "If file name length is over 128 character.
  IF strlen( lv_fullpath ) > 128.
    MESSAGE |File path is so long. Please choose another file path < 128 characters| TYPE 'S' DISPLAY LIKE 'E'.
  ENDIF.
  DATA: ls_wwwdata_tab TYPE wwwdatatab,
        lv_destination TYPE localfile.
  lv_destination = lv_fullpath.
  " Get attacth from smw0
  SELECT SINGLE *
    FROM wwwdata
    INNER JOIN tadir
            ON wwwdata~objid = tadir~obj_name
    INTO CORRESPONDING FIELDS OF ls_wwwdata_tab
    WHERE wwwdata~srtf2  = 0
      AND wwwdata~relid  = 'MI'
      AND tadir~pgmid    = 'R3TR'
      AND tadir~object   = 'W3MI'
      AND tadir~obj_name = lv_temp_source.

  IF sy-subrc <> 0.
    MESSAGE |Template doesn't exits in SMW0| TYPE 'S' DISPLAY LIKE 'E'.
  ENDIF.

  " download object
  CALL FUNCTION 'DOWNLOAD_WEB_OBJECT'
    EXPORTING
      key         = ls_wwwdata_tab
      destination = lv_destination.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_parameter
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_parameter .
  IF p_path IS INITIAL.
    MESSAGE |file path is empty!| TYPE 'S' DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_data .
  FIELD-SYMBOLS: <lt_data> TYPE ANY TABLE.
  ASSIGN gt_input[] TO <lt_data>.
  CALL METHOD cl_gui_frontend_services=>gui_upload
    EXPORTING
      filename                = p_path
      filetype                = 'ASC'
      has_field_separator     = '#'
      read_by_line            = 'X'
      codepage                = '4110' "UTF-8
      replacement             = ''
    CHANGING
      data_tab                = <lt_data>
    EXCEPTIONS
      file_open_error         = 1
      file_read_error         = 2
      no_batch                = 3
      gui_refuse_filetransfer = 4
      invalid_type            = 5
      no_authority            = 6
      unknown_error           = 7
      bad_data_format         = 8
      header_not_allowed      = 9
      separator_not_allowed   = 10
      header_too_long         = 11
      unknown_dp_error        = 12
      access_denied           = 13
      dp_out_of_memory        = 14
      disk_full               = 15
      dp_timeout              = 16
      not_supported_by_gui    = 17
      error_no_gui            = 18
      OTHERS                  = 19.
  IF sy-subrc NE 0.
    MESSAGE |Error Upload!| TYPE 'S' DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.
  DELETE gt_input INDEX 1.
  IF lines( gt_input ) = 0.
    MESSAGE |File is empty. Please input a value!| TYPE 'S' DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form process_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM process_data .
  LOOP AT gt_input INTO DATA(ls_input).
    APPEND INITIAL LINE TO gt_data ASSIGNING FIELD-SYMBOL(<fs_data>).
    <fs_data>-row_index = sy-tabix.
    <fs_data>-message = ''.
    <fs_data>-status = gc_status_nomal.
    <fs_data>-bukrs = ls_input-bukrs.
    <fs_data>-gjahr = ls_input-gjahr.
    <fs_data>-invoice_no = ls_input-invoice_no.
    SELECT SINGLE *
    FROM bkpf
    INTO @DATA(lt_check)
    WHERE belnr = @<fs_data>-invoice_no
          AND bukrs = @<fs_data>-bukrs
          AND gjahr = @<fs_data>-gjahr.
    IF sy-subrc NE 0.
      <fs_data>-status = gc_status_error.
      <fs_data>-message = |FI Document { <fs_data>-invoice_no } not found |.
    ENDIF.
    <fs_data>-url = ls_input-url.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form display_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_data .
  DATA: ls_color       TYPE lvc_s_colo,
        lo_column      TYPE REF TO cl_salv_column_table,
        lo_events      TYPE REF TO gcl_event_receiver,
        go_salv_events TYPE REF TO cl_salv_events.
  FIELD-SYMBOLS: <fs_data> TYPE ANY TABLE.
  ASSIGN gt_data TO <fs_data>.
  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table   =   go_salv                        " Basis Class Simple ALV Tables
        CHANGING
          t_table        =  <fs_data>
      ).
      DEFINE set_column.
        go_salv->get_columns( )->get_column( &1 )->set_short_text( CONV #( &2 ) ).
        go_salv->get_columns( )->get_column( &1 )->set_medium_text( CONV #( &2 ) ).
        go_salv->get_columns( )->get_column( &1 )->set_long_text( CONV #( &2 ) ).
      END-OF-DEFINITION.
      "build CataLog
      set_column 'STATUS' 'Status'.
      set_column 'ROW_INDEX' 'Row'.
      set_column 'INVOICE_NO' 'Invoice Number'.
      set_column 'GJAHR' 'Fiscal Year'.
      set_column 'BUKRS' 'Company Code'.
      set_column 'MESSAGE' 'Message'.
      set_column 'URL'  'Attachment URL'.
      "Set columns length.

      go_salv->get_columns( )->get_column( 'STATUS' )->set_output_length( 5 ).
      go_salv->get_columns( )->get_column( 'ROW_INDEX' )->set_output_length( 5 ).
      go_salv->get_columns( )->get_column( 'INVOICE_NO' )->set_output_length( 10 ).
      go_salv->get_columns( )->get_column( 'GJAHR' )->set_output_length( 10 ).
      go_salv->get_columns( )->get_column( 'BUKRS' )->set_output_length( 10 ).
      go_salv->get_columns( )->get_column( 'MESSAGE' )->set_output_length( 20 ).
      go_salv->get_columns( )->get_column( 'URL' )->set_output_length( 20 ).
      "Setting header alv
      go_salv->get_display_settings( )->set_list_header( 'Attachment List' ).
      lo_column ?= go_salv->get_columns( )->get_column( 'STATUS' ).
      lo_column->set_key( abap_true ).
      lo_column ?= go_salv->get_columns( )->get_column( 'ROW_INDEX' ).
      lo_column->set_key( abap_true ).
      lo_column ?= go_salv->get_columns( )->get_column( 'INVOICE_NO' ).
      lo_column->set_key( abap_true ).
      go_salv->get_columns( )->set_key_fixation( abap_true ).

      "handle event
      go_salv_events = go_salv->get_event( ).
      CREATE OBJECT lo_events.
      SET HANDLER lo_events->on_user_command FOR go_salv_events.

      go_salv->set_screen_status(
        report        = 'ZPG_FI_INVFILEUPLOAD'
        pfstatus      = 'ZSTANDARD'
        set_functions = go_salv->c_functions_all
      ).

      go_salv->get_functions( )->set_all( abap_true ).
      go_salv->get_layout( )->set_default( 'X' ).
      go_salv->get_display_settings( )->set_striped_pattern( cl_salv_display_settings=>true ).

      go_salv->get_layout( )->set_key( VALUE salv_s_layout_key( report = sy-repid ) ).
      go_salv->get_layout( )->set_save_restriction( if_salv_c_layout=>restrict_none ).
      go_salv->get_selections( )->set_selection_mode( if_salv_c_selection_mode=>row_column ).

      go_salv->display( ).






    CATCH cx_salv_data_error.
    CATCH cx_salv_msg.
    CATCH cx_salv_not_found.

  ENDTRY.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form add_attachment_to_object
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LT_ATTACHMET
*&---------------------------------------------------------------------*
FORM add_attachment_to_object.
  DATA: lv_path        TYPE string,
        lv_rootpath    TYPE string,
        lv_filename    TYPE string,
        lv_fname       TYPE string,
        lv_ext         TYPE string,
        lv_len         TYPE so_doc_len,
        lv_filetype    TYPE rlgrap-filetype,
        lv_object_type TYPE soodk-objtp,
        lv_put_to_kpro TYPE sonv-flag,
        ls_fol_id      TYPE soodk,
        ls_obj_id      TYPE soodk,
        ls_obj_data    TYPE sood1,
        ls_object      TYPE borident,
        ls_note        TYPE borident,
        ls_content     TYPE soli,
        lt_content     TYPE soli_tab,
        lt_objhead     TYPE STANDARD TABLE OF soli,
        lo_objhead     TYPE REF TO cl_bcs_objhead,
        lv_filedata    TYPE xstring,
        lv_filesize    TYPE i,

        lo_del_gos     TYPE REF TO cl_gos_document_service,
        lv_del_object  TYPE borident,
        lv_del_lporb   TYPE sibflporb,
        lt_del_object  TYPE sibflporbt,
        lv_offset      TYPE i,
        it_content     LIKE STANDARD TABLE OF soli.


  LOOP AT gt_attachment INTO DATA(gs_attachment).
    TRY .
        lv_path = gs_attachment-att_path.
        cl_bcs_utilities=>split_path( EXPORTING iv_path = lv_path IMPORTING ev_path = lv_rootpath ev_name = lv_filename ).
        cl_bcs_utilities=>split_name( EXPORTING iv_name = lv_filename IMPORTING ev_name = lv_fname ev_extension = lv_ext ).
        DATA(lv_plitter) = '/'. "Server
        FIND FIRST OCCURRENCE OF ':' IN lv_path.
        IF sy-subrc = 0.
          lv_plitter = '\'.     "Local
        ENDIF.
        REPLACE ALL OCCURRENCES OF '/' IN lv_path WITH '\'.

        cl_bcs_utilities=>split_path( EXPORTING iv_path = lv_path IMPORTING ev_path = lv_rootpath ev_name = lv_filename ).
        cl_bcs_utilities=>split_name( EXPORTING iv_name = lv_filename IMPORTING ev_name = lv_fname ev_extension = lv_ext ).

        REPLACE ALL OCCURRENCES OF '\' IN lv_path WITH lv_plitter.
        REPLACE ALL OCCURRENCES OF '\' IN lv_rootpath WITH lv_plitter.
        CALL FUNCTION 'SO_OBJECT_UPLOAD'
          EXPORTING
            filetype                = lv_filetype
            path_and_file           = lv_path
            no_dialog               = 'X'
          IMPORTING
            filelength              = lv_len
            act_filetype            = lv_filetype
            act_objtype             = lv_object_type
            file_put_to_kpro        = lv_put_to_kpro
          TABLES
            objcont                 = lt_content
          EXCEPTIONS
            file_read_error         = 1
            invalid_type            = 2
            x_error                 = 3
            object_type_not_allowed = 4
            kpro_insert_error       = 5
            file_to_large           = 6
            OTHERS                  = 7.

        lo_objhead = cl_bcs_objhead=>create( lt_objhead[] ).
        lo_objhead->set_filename( lv_filename ).
        lo_objhead->set_format( lv_filetype ).
        lo_objhead->set_vsi_profile( cl_bcs_vsi_profile=>get_profile( ) ).
        lt_objhead[] = lo_objhead->mt_objhead.

        ls_obj_data-objdes   = lv_fname.
        ls_obj_data-file_ext = lv_object_type.
        ls_obj_data-objlen   = lv_len.
        IF NOT lv_put_to_kpro IS INITIAL.
          ls_obj_data-extct  = 'K'.
        ENDIF.
        APPEND |&SO_FILENAME={ lv_fname }| TO lt_objhead.
        APPEND |&SO_FORMAT=BIN| TO lt_objhead.
        CALL FUNCTION 'SO_FOLDER_ROOT_ID_GET'
          EXPORTING
            region    = 'B'
          IMPORTING
            folder_id = ls_fol_id
          EXCEPTIONS
            OTHERS    = 1.

        CALL FUNCTION 'SO_OBJECT_INSERT'
          EXPORTING
            folder_id             = ls_fol_id
            object_type           = 'EXT'
            object_hd_change      = ls_obj_data
          IMPORTING
            object_id             = ls_obj_id
          TABLES
            objhead               = lt_objhead
            objcont               = lt_content
          EXCEPTIONS
            active_user_not_exist = 35
            folder_not_exist      = 6
            object_type_not_exist = 17
            owner_not_exist       = 22
            parameter_error       = 23
            OTHERS                = 1000.

        ls_object-objkey  = gs_attachment-att_object.
        ls_object-objtype = gs_attachment-att_type.
        ls_note-objtype   = 'MESSAGE'.
        IF sy-subrc = 0 AND ls_note-objkey IS NOT INITIAL.
          CONCATENATE
            ls_fol_id-objtp
            ls_fol_id-objyr
            ls_fol_id-objno
            ls_obj_id-objtp
            ls_obj_id-objyr
            ls_obj_id-objno
            INTO ls_note-objkey.

*        CALL FUNCTION 'BINARY_RELATION_CREATE_COMMIT'
*          EXPORTING
*            obj_rolea    = ls_object
*            obj_roleb    = ls_note
*            relationtype = 'ATTA'
*          EXCEPTIONS
*            OTHERS       = 1.
        ENDIF.


      CATCH cx_bcs.
    ENDTRY.

  ENDLOOP.



ENDFORM.
*&---------------------------------------------------------------------*
*& Form add_attachment_to_object2
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM add_attachment_to_object2 .
  DATA: ls_fol_id   TYPE soodk,
        ls_obj_id   TYPE soodk,
        ls_obj_data TYPE sood1,
        ls_folmem_k TYPE sofmk,
        ls_note     TYPE borident,
        ls_object   TYPE borident,
        lv_ep_note  TYPE borident-objkey,
        lv_offset   TYPE i,
        p_file      TYPE string,
        p_desc      TYPE so_obj_des.

  DATA: it_objhead TYPE STANDARD TABLE OF soli,
        it_content LIKE STANDARD TABLE OF soli,
        wa_content LIKE soli.
  LOOP AT gt_attachment INTO DATA(gs_attachment).
    ls_object-objkey = gs_attachment-att_object .
    ls_object-objtype = gs_attachment-att_type.
    p_file = gs_attachment-att_path.
    p_desc = 'abc'.
    TRY.
*        " Use GUI_UPLOAD to load the file from the local PC
        CALL FUNCTION 'GUI_UPLOAD'
          EXPORTING
            filename                = p_file   " Local file path
            filetype                = 'BIN'    " Binary file type
          IMPORTING
            filelength              = lv_offset
          TABLES
            data_tab                = it_content
          EXCEPTIONS
            file_open_error         = 1
            file_read_error         = 2
            no_batch                = 3
            gui_refuse_filetransfer = 4
            invalid_type            = 5
            no_authority            = 6
            unknown_error           = 7
            OTHERS                  = 8.

        IF sy-subrc <> 0.
          MESSAGE 'Error reading file' TYPE 'E'.
          RETURN.
        ENDIF.


        CALL FUNCTION 'SO_CONVERT_CONTENTS_BIN'
          EXPORTING
            it_contents_bin = it_content[]
          IMPORTING
            et_contents_bin = it_content[].

        CALL FUNCTION 'SO_FOLDER_ROOT_ID_GET'
          EXPORTING
            region    = 'B'
          IMPORTING
            folder_id = ls_fol_id
          EXCEPTIONS
            OTHERS    = 1.

        ls_obj_data-objsns = 'O'.
        ls_obj_data-objla = sy-langu.
        ls_obj_data-objdes = p_desc.
        lv_offset = strlen( p_file ) - 3.
        ls_obj_data-file_ext = p_file+lv_offset(3).
        ls_obj_data-objlen = lines( it_content ) * 255.

        CALL FUNCTION 'SO_OBJECT_INSERT'
          EXPORTING
            folder_id             = ls_fol_id
            object_type           = 'EXT'
            object_hd_change      = ls_obj_data
          IMPORTING
            object_id             = ls_obj_id
          TABLES
            objhead               = it_objhead
            objcont               = it_content
          EXCEPTIONS
            active_user_not_exist = 35
            folder_not_exist      = 6
            object_type_not_exist = 17
            owner_not_exist       = 22
            parameter_error       = 23
            OTHERS                = 1000.

        IF sy-subrc = 0 AND ls_object-objkey IS NOT INITIAL.
          ls_folmem_k-foltp = ls_fol_id-objtp.
          ls_folmem_k-folyr = ls_fol_id-objyr.
          ls_folmem_k-folno = ls_fol_id-objno.
          ls_folmem_k-doctp = ls_obj_id-objtp.
          ls_folmem_k-docyr = ls_obj_id-objyr.
          ls_folmem_k-docno = ls_obj_id-objno.
          lv_ep_note = ls_folmem_k.
          ls_note-objtype = 'MESSAGE'.
          ls_note-objkey = lv_ep_note.
          CALL FUNCTION 'BINARY_RELATION_CREATE_COMMIT'
            EXPORTING
              obj_rolea    = ls_object
              obj_roleb    = ls_note
              relationtype = 'ATTA'
            EXCEPTIONS
              OTHERS       = 1.
        ELSE.
          MESSAGE 'Not OK' TYPE 'I'.
          RETURN.
        ENDIF.

        IF sy-subrc = 0.
          MESSAGE 'OK' TYPE 'I'.
        ELSE.
          MESSAGE 'Not OK' TYPE 'I'.
        ENDIF.

      CATCH cx_sy_file_access_error.
        MESSAGE 'Error reading file' TYPE 'E'.
    ENDTRY.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form add_attachment_to_object3
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM add_attachment_to_object3 .
  DATA: git_objhdr  TYPE TABLE OF solisti1 WITH HEADER LINE,
        git_objcont TYPE TABLE OF solisti1 WITH HEADER LINE,
        git_hexcont TYPE TABLE OF solix WITH HEADER LINE,
        g_docinfo   TYPE sofolenti1.
  DATA: g_docdata LIKE sodocchgi1.
  DATA: g_folderid TYPE soodk.
  DATA: lv_path     TYPE string,
        lv_rootpath TYPE string,
        lv_filename TYPE string,
        lv_fname    TYPE string,
        lv_ext      TYPE string.
  DATA: g_extension TYPE soodk-objtp.
  DATA: g_bizojb     TYPE borident,
      g_attachment TYPE borident.
  LOOP AT gt_attachment INTO DATA(gs_attachment).
    TRY.
        CLEAR: lv_filename, lv_ext.
        lv_path = gs_attachment-att_path.
        cl_bcs_utilities=>split_path( EXPORTING iv_path = lv_path IMPORTING ev_path = lv_rootpath ev_name = lv_filename ).
        cl_bcs_utilities=>split_name( EXPORTING iv_name = lv_filename IMPORTING ev_name = lv_fname ev_extension = lv_ext ).
        "    1. Get the folder id
        CLEAR : g_folderid.
        CALL FUNCTION 'SO_FOLDER_ROOT_ID_GET'
          EXPORTING
            region                = 'B'
          IMPORTING
            folder_id             = g_folderid
          EXCEPTIONS
            communication_failure = 1
            owner_not_exist       = 2
            system_failure        = 3
            x_error               = 4
            OTHERS                = 5.
        IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDIF.

        CLEAR : git_hexcont[].
        "Upload attachment
        CALL FUNCTION 'GUI_UPLOAD'
          EXPORTING
            filename                = lv_path
            filetype                = 'BIN'
          TABLES
            data_tab                = git_hexcont
          EXCEPTIONS
            file_open_error         = 1
            file_read_error         = 2
            no_batch                = 3
            gui_refuse_filetransfer = 4
            invalid_type            = 5
            no_authority            = 6
            unknown_error           = 7
            bad_data_format         = 8
            header_not_allowed      = 9
            separator_not_allowed   = 10
            header_too_long         = 11
            unknown_dp_error        = 12
            access_denied           = 13
            dp_out_of_memory        = 14
            disk_full               = 15
            dp_timeout              = 16
            OTHERS                  = 17.
        IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDIF.
        CLEAR : git_objhdr[].
        g_docdata-obj_name  = 'MESSAGE'.
        g_docdata-obj_descr = lv_filename.
        g_docdata-obj_langu = 'EN'.
        CONCATENATE '&SO_FILENAME=' lv_filename INTO git_objhdr-line.
        APPEND git_objhdr.
        git_objhdr-line = '&SO_FORMAT=BIN'.
        APPEND git_objhdr.

        g_extension = lv_ext.
        CALL FUNCTION 'SO_DOCUMENT_INSERT_API1'
          EXPORTING
            folder_id                  = g_folderid
            document_data              = g_docdata
            document_type              = g_extension
          IMPORTING
            document_info              = g_docinfo
          TABLES
            object_header              = git_objhdr
*           object_content             = git_objcont
            contents_hex               = git_hexcont
*           OBJECT_PARA                =
*           OBJECT_PARB                =
          EXCEPTIONS
            folder_not_exist           = 1
            document_type_not_exist    = 2
            operation_no_authorization = 3
            parameter_error            = 4
            x_error                    = 5
            enqueue_error              = 6
            OTHERS                     = 7.
        IF sy-subrc <> 0.
          WRITE:/ 'SO_DOCUMENT_INSERT_API1 SY-SUBRC = ', sy-subrc.
        ENDIF.
        CLEAR : g_bizojb, g_attachment.
        g_bizojb-objkey = gs_attachment-att_object .
        g_bizojb-objtype = 'BKPF'.
        g_attachment-objkey  = g_docinfo-doc_id.
        g_attachment-objtype = 'MESSAGE'.

        CALL FUNCTION 'BINARY_RELATION_CREATE'
          EXPORTING
            obj_rolea      = g_bizojb
            obj_roleb      = g_attachment
            relationtype   = 'ATTA'
*           FIRE_EVENTS    = 'X'
* IMPORTING
*           BINREL         =
* TABLES
*           BINREL_ATTRIB  =
          EXCEPTIONS
            no_model       = 1
            internal_error = 2
            unknown        = 3
            OTHERS         = 4.
        IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.


          WRITE:'Error in document attachment'.

        ELSE.
          "
          WRITE: 'Success' .

        ENDIF.
      CATCH cx_bcs. .

    ENDTRY.

  ENDLOOP.
ENDFORM.